# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: abcdedu-server-cicd-dev

on:
  push:
    branches: [ "develop" ]

jobs:
  CI-CD:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: JDK 17 셋업
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: application.yml 생성
      run: |
        cd ./src/main/resources 
        echo "$APPLICATION_DEV" > ./application.yml
      env:
        APPLICATION_DEV: ${{ secrets.APPLICATION_DEV }}


    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Build with Gradle Wrapper
      run: ./gradlew build

    - name: AWS Configure 설정
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2
        
    - name: ECR 로그인
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: docker 빌드 및 ECR push
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: abcdedu-ecr-dev
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "IMAGE_NAME=$ECR_REGISTRY/$ECR_REPOSITORY" >> $GITHUB_OUTPUT
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: ECR image pull & blue-green 배포 스크립트 실행
      uses: appleboy/ssh-action@master
      env: 
        IMAGE_NAME : ${{ steps.build-image.outputs.IMAGE_NAME}}
        IMAGE_TAG : ${{ steps.build-image.outputs.IMAGE_TAG}}
        AWS_ECR_DNS: ${{ secrets.AWS_ECR_DNS }}
      with:
        host: ${{ secrets.EC2_DEV_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_DEV_KEY }}
        envs: IMAGE_NAME, IMAGE_TAG, AWS_ECR_DNS
        script: |
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin $AWS_ECR_DNS
          docker pull $IMAGE_NAME:$IMAGE_TAG
          docker image tag $IMAGE_NAME:$IMAGE_TAG meongcare/dev
          chmod 777 ./deploy.sh
          ./deploy.sh
          docker image prune -f
